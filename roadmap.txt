redesign of code structure count : 1 (hopefully it won't get higher)

the actual graphs I'll use will be retrieved from OSM and pretreated in python with OSMnx 
  
 
also will have to do clean error reporting 

done : 
    - graphs are kinda implemented
        - I can add stuf to them 
        - I can print them (I can't load them from a file yet though)

        - I can also load them let's go 
    
    - script can load a city into a networkx graph thingy (easy part) 

    - walker structure pretty much done 

    - apparently I wrote a tactics structure I didn't even remember it 

    - rewrote the graph implem in the GraphTable structure 

    - wrote the table manip fn ; haven't tested them yet

    - graph table fully implmented 

    - deleted deprecated stuff

    - implemented some of the movement ; tested it 


pending :  

    - figure out the way to implement movement : 
        - add iteration field to line arr and walkers; if don't match don't take into account 
        - add curflux / netflux field to line arr , at the start of iteration set curflux to nextflux 
          and reset nextflux 

    - make the pyhton script to retrieve / format / write real graphs from the real world
      (god have mercy on me) 

        - do a function to handle the whole discretisation of the graph w a custom step 
          (scary part)
        - then do a function to dump it in the custom csv format (less scary but prolly hard part)

    - once all of this is done I can actually start to simulate stuff 

    - write propper error reporting 

    - write the trace fn 

    - maybe make a "misc" file w the memory + error functions in it 

    - if I have the time use custom malloc 

make a choice for the movement of walkers in the table 
  -> append by ref of entry (know which index) 
  -> append by index of entry  (use the index)
I'll implement both and see which one is the best 

change format to retrieve curgen info of the simul

the rules should actually prolly return a line cuz it allows to update flux information fast 
so it's likely better to work w entry references n stuff in the code 