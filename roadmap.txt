unify error code !!


redesign of code structure count : 1 (hopefully it won't get higher)

I'm changing the graph structure to something more intricate; the graph will be somewhat of a table 
where table[i] stores relevant informations regarding the node i (adjacency list, number of walkers here etc)

this structure is somewhat of a "merge" between the graph structure AND the WalkerTable structure. 

it will NEED to have it's size passed to it before allocating it and WILL NOT rely on dynamic arrays.
this also goes with the new Line structure I think 

the actual graphs I'll use will be retrieved from OSM and pretreated in python with OSMnx 
  
 
also will have to do clean error reporting 

done : 
    - graphs are kinda implemented
        - I can add stuf to them 
        - I can print them (I can't load them from a file yet though)

        - I can also load them let's go 
    
    - script can load a city into a networkx graph thingy (easy part) 

    - walker structure pretty much done (testing pending though)

    - apparently I wrote a tactics structure I didn't even remember it 

    - rewrote the graph implem in the GraphTable structure 


pending : 
    

    - finish the graph table : 
        - implement the walker table functions ; once this is done I'll delete the old 
          graph and walker files 
          
          I think I can reuse the old ones tbh 

    - figure out the way to implement movement : 
        - add iteration field to line arr and walkers; if don't match don't take into account 
        - add curflux / netflux field to line arr , at the start of iteration set curflux to nextflux 
          and reset nextflux 

    - make the pyhton script to retrieve / format / write real graphs from the real world
      (god have mercy on me) 

        - do a function to handle the whole discretisation of the graph w a custom step 
          (scary part)
        - then do a function to dump it in the custom csv format (less scary but prolly hard part)


make a choice 
  -> append by ref of entry (know which index) 
  -> append by index of entry  (use the index)

