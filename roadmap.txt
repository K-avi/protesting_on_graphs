redesign of code structure count : 4 fuck it one hot everything spatial complexity is for pussies 
remember kids everything is in O(1) if u store everything


the done section writes every step I did ; some of them are obsolete (for example I changed 
implem of graphs multiple times) but it's a good way to track my progress

done : 
    - graphs are kinda implemented
        - I can add stuf to them 
        - I can print them (I can't load them from a file yet though)

        - I can also load them let's go 
    
    - script can load a city into a networkx graph thingy (easy part) 

    - walker structure pretty much done 

    - apparently I wrote a tactics structure I didn't even remember it 

    - rewrote the graph implem in the GraphTable structure 

    - wrote the table manip fn ; haven't tested them yet

    - graph table fully implmented 

    - deleted deprecated stuff

    - implemented some of the movement ; tested it 

    - finished the python script ( written the discretisation function and functions to read / 
      write custom CSVs ) nb : the loadCSV function doesn't care for flux atm but it will at some
      point 

    - test the new wte structure 
    - test the updated graph_table functions 

    - movement mostly done ; problem with the update of flux for some 
      reason (not anymore)

    -fixed the flux

    - do some proper testing of simulations (kinda)

    - write the tactics stuff (tested ) (now it is)

    - write propper error reporting 

    - put error reporting at the right place 

    - re implement tactics

    - test tactics (kind of done )

    - write the actual main n maybe do a script to call stuff in bash or smtg 
      ( finished ; tested )
    
    - find out how to parse tactics  (tested yet )

    - removed some of the unnecessary elements from the structure ; 
      watch out for potential bugs IG

    - finish docu (docu of usage is still pending bc main isn't done yet )

    - write a wrapper around trace dump

    - tested main 

    - test tactics parsing

    - write the different rules 

    - format output 

    - separate mutable / immutable fields of walkers (necessary to create relevant trace)
      I actually just replaced the posref inside the walker to an uint32 representing 
      the index so it should work now 
    
    - remove more elements from structures to gain space (I might be able to remove more 
      but I'm not sure what I could do tbh)
    
    - write the whole load trace python script

    - implemented the coefficient based attraction rule

    - make the movement choice a meta tactic 

    - make sure that the program behaves well when not given optionnal args

    - scale walker num like opt args

    - fix the args handling (I think)

    - heavy perftest : tested  time complexity of different rules ; 
      results were predictible ; 
      from slowest to fastest : 

      attco 
      align 
      attra 
      rand
      sleep 

    - tested multi threading ; thread management is slower than running the actual 
      simulation on small scale (lol)
      might retest w a bigger graph I dunno 
    
    - found out something really weird : the space complexity DID NOT 
      affect the number of nodes where I get out of the cache so I'm not sure what 
      causes me to break in perftest. I'm really confused 
    

pending :  


    - perftest another 20000walker * 1000 it simul cuz the last result was fucked up 
      (currently running)

    - write some actual data analysis functions on the graphs in Python

    - evaluate meta fns with variant of other fns and stuff to try and gain performance

    - maybe revert to bigger space complexity cuz dereferencing pointers good?????

    - script to do simul and do data analysis on it afterwards 

    - script to get mean of mean i.e do a bunch of simulation ; get their results and plot 
      the mean of their result 

    - create a shell / python wrapper for the program 
      wire up the different sections of the prgm smtg like : 
      python retriever -> C simulation -> python trace loader -> python dt analysis 

    - do the malloc wrapper arena/mempool thingy     

    - remove curse words from commentaries and documentation

notes in french from the meeting I had: 

mesures: 

compter nb groupes : (SGI par les noeuds où il y a des marcheurs connexes)

etalement des gp : ( çad nb cases occupées par le gp)

nb moyen de marcheurs sr un gp :

  (
  a la fin : faire courbe de l'étalement en fonction du nb etapes 
  (etalement moyen gp ; nb pers moyen gp )
  groupe : commence à partir de 2 marcheurs 
  )

mobilité : nb moyen de noeuds différents que chaque marcheur a parcouru 


  

 