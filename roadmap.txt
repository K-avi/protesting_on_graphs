currently going over global skeleton of project and implementing the basic graph structure.


my goal will be to be able to write / load formatted csv files w this function
the graph implem is very minimalist so it might be tricky to implement

once I'm done w this function I'll do a small test graph and will then move on to the basics of the walkers. 


the actual graphs I'll use will be retrieved from OSM and pretreated in python with OSMnx 
(I'll write a script to do that at some point)         

 
also will have to do clean error reporting 

done : 
    - graphs are kinda implemented :)
        - I can add stuf to them 
        - I can print them :) (I can't load them from a file yet though)

        - I can also load them let's go 
    
    - script can load a city into a networkx graph thingy (easy part) 



pending : 
    
    - walker structure : 
        - do I need access to every walker at a specific node in O(1)?
            - if so implement them in a lil table thing 
            ->need to think about the suppression cuz it might be annoying 
            is there need for an actual walker entity guy going around? 
        - should I even be able to identify each of them ????
    
    - rule / tactics structure : 
        - good question 
    
    - figure out the way to implement movement : 

        if every walker moves at the "same moment" might have to make them all move and 
        THEN update the flux values so I should prolly store old flux values somewhere or something like 
        that in order to not mess up the decision process 

        (ask about markov chains)
    
    - figure out the way to implement walkers : 

        what state does each walker needs? 

        how to implement the walker table exactly
        (prolly hashtable w array resolving cuz it's cool)

        - actual movement of walkers on the graph : 
        good question tbh 
    
    - make the pyhton script to retrieve / format / write real graphs from the real world
      (god have mercy on me) 

        - do a function to handle the whole discretisation of the graph w a custom step 
          (scary part)

          rely on networkx
          -> convert graph to normal undir graph format ; then add 

        - then do a function to dump it in the custom csv format (less scary but prolly hard part)

-> les marcheurs doivent bcp bouger 

je veux acces aux marcheurs situes a 1 node en O(1)
deplacement d'un marcheur en O(1)

mise a jour des infos le concernant (position actuelle) en O(1)

idee: table indexe par node (possiblement hache ?)

(table impbriquee ?)

-> suppression marcheurs d'un tableau -> echange avc dernier elmt ; nbelem --  
    -> O(1)
-> insertion au dernier elem 

compatibilite avc mouvement??? (tt marcheurs doivent bouger en mm temps ) : bummer

maintenir liste deja deplaces ig ?

impact sur le flux -> avoir un champ flux en cours ; flux prec ?